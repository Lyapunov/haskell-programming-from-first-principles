Typeclasses

Type about how to create, typeclass about how to consume.
"interfaces". constrainted (ad-hoc) polymorphism.

See these lines:

:info X
...
instance ~~~
instance ~~~
...

will examine typeclases Eq, Ord, Show

Note that logically (and practically) Enum -> Ord -> Eq

Eq:
   (1,'a')==(2,'b') is a valid expression
   (1,'a')==('a',1) is invalid

A tuple is Eq only if its members are Eq:
   instance (Eq a, Eq b) => Eq (a, b)

Num:
   (+),(*),(-),negate,abs,signum,fromInteger

Integral:
   Num -> Real ->
          Enum -> Integral

   Typeclass inheritance!
      Real cannot override the method of Nums, so there is
      no deadly diamond.

   E.g. class (Num a) => Fractional a where 
        ...

Type-defaulting typeclasses:
   Resolving polymorphic value for evaluation!

   concrete type must have an instance for all required typeclasses.

   E.g.:
      default Num Integer
      default Fractional Double

   :: can assign a more specific type, e.g. 5 :: Int

   !!!Types can be made more specific, but not more general!!!

(Haskell report -> the standard that specifies the language.)

Ord:
   can be put in order.
   - compare, min, max, <, >, <=, >=

Enum:
   each element has a predessor and a successor
   - succ, pred, ... enumFromTo, enumFromThenTo
   - enumFromTo 'a' 'k' == "abcdefghijk"

Show:
   - the purpose is human readibility, not serialization!
   - show 2323 converts the number to string!
   - printing itself is a side effect
        Haskell handles effectfull computation in a special way.
   - IO() is obligatory type of main, because main produces only 
     side effects. The () (the unit, the empty touple) is for the
     main return value.

Type deriving:
   - magically deriving typeclass instances, e.g.
       > data Mood = Blah deriving Show
       > Blah

read:
   - takes strings and turn them into things.
   - the problem is that read is a partial function, it does not
     return proper value for all possible inputs.
     Example: read "Blah" :: Integer doesn't make sense.

Eq instances:
   - Keyword instance is for declarint typeclass instances
      instance <typeclass> <type> where Trivial' == Trivial' = True
                                  ~~~~~
                                   separator between declaration and functions
                                        ---------------------------
                                           infix notation for defining the function
                                           on a pair of args

Partial functions:
   - What if in chapter_6/day_of_week.hs, we forgot the unconditional case
     in the Eq DayOfWeek instance? ( the fallback case).
     - exception arise when Mon == Wed.
     - :set -Wall
       may help, you'll get the 'pattern match(es) are non-exhaustive' warning.

Page 204
