Chapter 5: Types

- Every value (irreducible expression) has a type.
- In Haskell, there is no untyped data
  -> every data ordinates in a data ctor from a typedef!

Strong typing == not allowing cetrain errors
Static typing == types are known at compile time

Type inference -> deducing types of untyped variables
                  from expressions.

Command :t is :type!

    :t True ---> True :: Bool
but :t 13   ---> 13 :: Num a => a
                       what is it? polymorphic value!

Type signature of functions? Example:
    :t not
    not :: Bool -> Bool

-> : arrow, type constructor for functions.

     Yes, it is also a type ctor like Bool, but it
     takes arguments and has no data ctors:
        :i Bool
        data Bool = False | True

        :i (->)
        data (->) a b
     Since it has no data ctors, the value of type
     is the function! Functions are values!!!

,  : type ctor for two-tuple, similar:
        :i (,)
        data (,) a b = (,) a b

Type signatures in GHC 7.10:
   old: [a] -> Int
   new: Foldable t => t a -> Int

        !!polymorphism!! not just for lists, but for all
        instances of the Foldable (type)class. 

Type signatures with multiple typeclasses:
   (Num a, Num b) => a -> b -> b

   - no other argument, don't appear like a tuple at value,term
     level, !!!just multiple (typeclass) constraints!!!

Currying:
   lambda expressions with multiple parameters
      == just nested lambdas

      fff :: Integer -> Integer -> Integer
      fff :: Integer -> ( Integer -> Integer )
             ~~~~~~~~~~~~~
                 the function takes a number, and returns
                 an other function -- PARTIAL APPLICATION!
     
      Remember:
         lam xy.~~ = lam x.(lam y.~~)
         f(x,y) = (f'(x))(y)          ~~~~ hard to imagine

  Another example, in blah.hs
       blah :: a -> a -> a -> String
       blah x y z = "Blah"

       a -> ( a ->  a -> String )
              a -> (a -> String )
                    a -> String
       f(x,y,z)=((f'(x))(y))(z)

Uncurrying:
     uncurried - 1 function, more arguments in a tuple
     curried   - many functions, 1 argument for each

     automatic vs. manual nesting in curry_uncurry.hs!

Currying and uncurrying existing functions:
     for 2 arg functions:
        curry fst vs. uncurry (+)

NOTE: type checking for unimplemented functions
   > let f :: a -> a -> a; f = undefined
   > let x :: Char; x = undefined
   > :t f x

Polymorphism:
   -ic: "made of many form"
   - Two forms: parametric (== unconstrainted == fully)
                vs. constrainted

     constraining : making the number of possible good
         types narrower, but the allowed operations wider

     lowercase in type sygnature: polymorphic
     uppercase : specific

     e.g. identity function, id :: a -> a
        maximally polymorphic, minimally active!

     btw. id is the only a -> a function.
          there are only two a->a->a functions.

Polymorphic constants:
   - Numeric literals, e.g.
     (-10) can be any numeric type (and 6.3 cannot)
     5 :: Int makes us more specific!

   - Fixing the infamous 6 / length [2,3,4] example:
     > 6 / fromIntegral( length [2,3,4] )
     works!

Type inference:
   - Good practice to declare all types explicitly.

Page 158
