Char: character
String: list of characters

try:
 :type 'a'
 :type "hello"

:: is a type signature,
  --->'a' :: Char, a has a type of Char
  [] is the syntactic sugar for list
    here [Char] is list of Char.

Printing
   print    -> keeps quotation marks
   putStr
   putStrLn -> ordinary print

> :l something.hs
> main

IO == eye-oh
Concatenation:
   - link together
      - (++) -infix, two list
      - concat - concats lists in a list 


(++) :: [a] -> [a] -> [a]
[a] -> a is polymorphic, any type can be


where, let : creates local binding which is not 
             visible at the top level

:t ---> type
:m ---> unload module

More list functions:
 - : (cons) operator
      'a' : 'b' === syntax error
      'a' : []  === "a"
      'a' : 'b' : "abba" === "ababba"

 - head === the first item of the list

 - tail === the list with the head chopped off

 - take === returns the specified number of elements

 - drop === returns the list after dropping the specified
            number of elements

 - !! indexing function. 0 is the first index

Page 101


