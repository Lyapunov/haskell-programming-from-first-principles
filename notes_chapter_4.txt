Data declaration
----------------
type level vs. term level (types vs. values)

data Bool = False | True
---  1.     2. 

1. type constructor, the capitalized name of the type
2. pipe separated date constructors

See :i not vs. not True

Numeric types
-------------
Integral numbers: Int (fixed precision) vs. Integer (arbitrary large)
Fractional: Float (single precision), Double (double precision),
            Rational (arbitrary precise but not efficient),
            Scientific (space-efficient and almost arbitrary precise;
                        coefficient is Integer, exponent is Int)
Num is the superclass all of these

import GHC.Int -> Int8, Int16, Int32, Int64 - n bit precision

See :i (/) or :t (/) - (/) works with as having the 'Fractional'
                       constraint 

Comparing values:
> let x = 5
> x == 15, x < 17, x > 13, x /= 14
Page 113
