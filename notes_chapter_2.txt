Normal form -- irreducible!

1 + 1 is not irreducible, 2 is irreducible.
redexes : reducible expressions.

evaluation = reduction = normalizing = executing

-------

expressions:
 - functions : - for a specific input always the same result
               - one argument. (More arguments via currying.)

   definition, in ghci : let quadro x = x * 4
               in soure: quadro x = x * 4
                         name, head, =, body
 
conventions:

   capitalization matters!!!
    - modules and types start with capital.
    - functions start with lowercase letter
   Haskell likes camelCase

   type variables a,b,c..
   functions can be used as arguments: f, g, f1 ...
   variables do not have to be a single letter, though they often are
   arguments to functions x, y, z, x1 ...
   list of x is xs (plural form), (x:xs)

identity function: id, returns whatever value is given

operators: functions that can be used in infix style, functions are
   prefix by the default
   see :info ^, :info triple, infixr!

whitespaces:
   !!!use spaces for indentation!!!
   - whitespaces can make the code more conscious
   - indentation is important and often replaces syntactic markers
   - groups should be indended and should be indented at the same level
       let x = 3
         z = 3    ---> GHCI will complain about this!!! won't run!!!
   - !!!study indentation patterns carefully!!!
   
arithmetic functions:
   - mod vs. rem
       mod (-12) 7 =/= rem (-12) 7 (2 vs. -5)
       5 `mod` (-3) =/= 5 `rem` (-3)
   - 5 + -3 is not good, 5 + (-3) is. Unary - is syntactic sugar.
     negate vs. subtract

page 75
