Normal form -- irreducible!

1 + 1 is not irreducible, 2 is irreducible.
redexes : reducible expressions.

evaluation = reduction = normalizing = executing

-------

expressions:
 - functions : - for a specific input always the same result
               - one argument. (More arguments via currying.)

   definition, in ghci : let quadro x = x * 4
               in soure: quadro x = x * 4
                         name, head, =, body
 
conventions:

   capitalization matters!!!
    - modules and types start with capital.
    - functions start with lowercase letter
   Haskell likes camelCase

   type variables a,b,c..
   functions can be used as arguments: f, g, f1 ...
   variables do not have to be a single letter, though they often are
   arguments to functions x, y, z, x1 ...
   list of x is xs (plural form), (x:xs)

identity function: id, returns whatever value is given

operators: functions that can be used in infix style, functions are
   prefix by the default
   see :info ^, :info triple, infixr!

whitespaces:
   !!!use spaces for indentation!!!
   - whitespaces can make the code more conscious
   - indentation is important and often replaces syntactic markers
   - groups should be indended and should be indented at the same level
       let x = 3
         z = 3    ---> GHCI will complain about this!!! won't run!!!
   - !!!study indentation patterns carefully!!!
   
arithmetic functions:
   - mod vs. rem
       mod (-12) 7 =/= rem (-12) 7 (2 vs. -5)
       5 `mod` (-3) =/= 5 `rem` (-3)
   - 5 + -3 is not good, 5 + (-3) is. Unary - is syntactic sugar.
     negate vs. subtract

Parenthesing infix functions
    (+) is referring function + as a value
    (+1) the same addition function but with one argument applied

    > 1 + 2
    > (+) 1 2
    > (+1) 2  ---> sectioning!

    - is an exception because of negation, overloading is troublesome

Evaluation
   - reducing reducible expressions until it is irreducible
   - lazy evaluation
     applications == reducible
     value == finished, irreducible

let vs. where
   - are for introducing names for expressions
   - let ... in ... is an expression. where is bound to surrounding
     syntactic construct!
   - see FunctionWithWhere.hs vs FunctionWithLet.hs
      - REPL cannot keep two modules loaded simultaneusly
      - lambda x.x === (\x -> x) in Haskell (identity)
      - let x = a in y(x) === y(x) where x = a === (\x -> y(x)) a

Chapter exercises:

   ($): definition of $ is, which is an infix operator with lowest
        possible precedence:
        f $ a = f a
        "evaluate everything to the right of me first."

   Interesting:
       (*2)(2+2) works (because it is function + argument)
       (2+2)(*2) doesn't work, (2+2) is not a function!

   Order of expressoins matters in source file, but in REPL it doesn't
   matter.

Page 88
