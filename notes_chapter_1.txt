function: each input related to exactly one output

lambda terms: expressions, variables, abstractions

expressions = variables + abstractions

variables have no meaning or value! just names for potential inputs

abstraction = lambda function = lamdba arg. body

alpha equivalence = arg variable names can be changed on demand. 

beta reduction = applying a term to an argument; replacing bound variables
                 with the value of the argument, and eliminating the head
 - (lambda x. ~1~)(~2~) -> ~2~ is substituted in ~1~ as x.

We can also apply a lambda funtion to another lambda abstraction:

(lambda x.x)(lambda y.y)
[x := (lambda y.y)]
(lambda y.y)

Lambda calculus is left associative.

free variables = variables in the body expression which are not named
                 in the head. Free variables are not alpha-equivalent.

multiple agrs? only lambda can only bind one parameter and can accept only
one argument. multiple args == multiple nested head.
   Moses Schonfinkel, Haskell Curry == currying

   lambda xy.xy    is lambda x.(lambda y.xy)

Notes, some identities:
-----------------------
 - (lambda z.a) === a ( which is a free variable)
 - (lambda z.a)(...) === a.
 - lambda z.(lambda n.z)(...) === lambda z.z
 - (lambda a.a)(...) === ..., identity function in front doesn't change the game
 - BUT (~1~)(lambda a.a)(~2~) =/= (~1~)(~2~) in general
 - (lambda x.xx)(...) === (...)(...)

beta normal form = cannot be beta reduced

combinator = lambda without free variables (combines the args)

(per se == by itself)

divergence = the reduction process never terminates. A famous example
is omega:

(lambda x.xx)(lambda x.xx)
[ x:= (lambda x.xx) ]
(lambda x.xx)(lambda x.xx)


Notes:
------
 - Parentheses are written because of left-associativity. And parantheses
   matter:
    - lambda y.(lambda z.~1~)(~2~) =/= (lambda y.(lambda z.~1~))(~2~)
      in general
 - The order of evaluation matters.
    - (lambda xy.xy)(lambda x.x)z =/= (lambda xy.xy)z,
   It seems it is illegal starting the evaluation 'from inside'
   (exercise 5 from beta reduce set).

Definitions:
------------
1. lambda: introduces arguments for binding in an expression.
2. lambda abstraction === anonymous function
3. application === beta reduction
4. lambda calculus === formal system for expressing programs in abstraction +
                       application.
5. normal order === common evaluation strategy in lambda calculi,
                    evaluating the leftmost outermost lambda first, nested
                    evaluation only if running out arguments outside. 
                    NORMAL ORDER IS NOT HOW HASKELL CODE IS EVALUATED!
